% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.glmSLMA.R
\name{ds.glmSLMA}
\alias{ds.glmSLMA}
\title{Fits Generalized Linear Model via Study-Level Meta-Analysis}
\usage{
ds.glmSLMA(
  formula = NULL,
  family = NULL,
  offset = NULL,
  weights = NULL,
  combine.with.metafor = TRUE,
  dataName = NULL,
  checks = FALSE,
  maxit = 30,
  datasources = NULL
)
}
\arguments{
\item{formula}{an object of class formula describing
the model to be fitted. For more information see 
\strong{Details}.}

\item{family}{identifies the error distribution function to use in
the model.}

\item{offset}{a character string specifying the name of a variable to be used as
an offset.\code{ds.glmSLMA} does not allow an offset vector to be
written directly into the GLM formula.}

\item{weights}{a character string specifying the name of a variable containing
prior regression
weights for the fitting process. \code{ds.glmSLMA} does not allow a weights vector to be
written directly into the GLM formula.}

\item{combine.with.metafor}{logical. If TRUE the
estimates and standard errors for each regression coefficient are pooled across
studies using random-effects meta-analysis under maximum likelihood (ML),
restricted maximum likelihood (REML) or fixed-effects meta-analysis (FE). Default TRUE.}

\item{dataName}{a character string specifying the name of an (optional) data frame that contains
all of the variables in the GLM formula.}

\item{checks}{logical. If TRUE \code{ds.glmSLMA} checks the structural integrity 
of the model. Default FALSE. For more information see \strong{Details}.}

\item{maxit}{a numeric scalar denoting the maximum number of iterations that
are permitted before \code{ds.glmSLMA} declares that the model has failed to converge. 
For more information see \strong{Details}.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. 
If the \code{datasources} argument is not specified
the default set of connections will be used: see \code{\link{datashield.connections_default}}.}
}
\value{
Many of the elements of the output list returned by \code{ds.glmSLMA} are 
equivalent to those returned by the \code{glm()} function in native R. However,
potentially disclosive elements
such as individual-level residuals and linear predictor values are blocked. 
In this case, only non-disclosive elements are returned from each study separately.

The list of elements returned by \code{ds.glmSLMA} is mentioned below:

\code{coefficients}: a matrix with 5 columns:
   \itemize{
   \item{First}{: the names of all of the regression parameters (coefficients) in the model} 
   \item{second}{: the estimated values} 
   \item{third}{: corresponding standard errors of the estimated values} 
   \item{fourth}{: the ratio of estimate/standard error} 
   \item{fifth}{: the p-value treating that as a standardised normal deviate} 
}

\code{family}: indicates the error distribution and link function used
in  GLM.

\code{formula}: model formula, see description of formula as an input parameter (above).

\code{df.resid}: the residual degrees of freedom around the model.

\code{deviance.resid}: the residual deviance around the model.

\code{df.null}: the degrees of freedom around the null model (with just an intercept).

\code{dev.null}: the deviance around the null model (with just an intercept).

\code{CorrMatrix}: the correlation matrix of parameter estimates.

\code{VarCovMatrix}: the variance-covariance matrix of parameter estimates.

\code{weights}: the vector (if any) holding regression weights.

\code{offset}: the vector (if any) holding an offset (enters glm with a
coefficient of 1.00).

\code{cov.scaled}: equivalent to \code{VarCovMatrix}.

\code{cov.unscaled}: equivalent to VarCovMatrix but assuming dispersion (scale)
parameter is 1.

\code{Nmissing}: the number of missing observations in the given study.

\code{Nvalid}: the number of valid (non-missing) observations in the given study.

\code{Ntotal}: the total number of observations in the given study 
                       (\code{Nvalid} + \code{Nmissing}).

\code{data}: equivalent to input parameter \code{dataName} (above).

\code{dispersion}: the estimated dispersion parameter: deviance.resid/df.resid for
a gaussian family multiple regression model, 1.00 for logistic and poisson regression.

\code{call}:  summary of key elements of the call to fit the model.

\code{na.action}:  chosen method of dealing with missing values.
 Usually, \code{na.action = na.omit}
indicating any individual (or more strictly any "observational unit")
that has any data missing that are needed for the model is
excluded from the fit, even if all the rest of the required data are present.
These required data include: the outcome variable, covariates,
or any values in a regression weight vector or offset vector. As a
side effect of this, when you include additional covariates in the model
you may exclude extra individuals from the analysis
and this can seriously distort inferential tests based on assuming models are
nested (eg likelihood ratio tests).

\code{iter}: the number of iterations required to achieve convergence
file for the \code{glm()} function in native R.

Once the study-specific output has been returned, the function returns the
number of elements relating to the pooling of estimates across studies via
study-level meta-analysis. These are as follows:

\code{input.beta.matrix.for.SLMA}: a matrix containing the vector of coefficient
estimates from each study.

\code{input.se.matrix.for.SLMA}: a matrix containing the vector of standard error
estimates for coefficients from each study.

\code{SLMA.pooled.estimates}: a matrix containing pooled estimates for each
regression coefficient across all studies with pooling under SLMA via
random-effects meta-analysis under maximum likelihood (ML), restricted maximum
likelihood (REML) or via fixed-effects meta-analysis (FE).

\code{convergence.error.message}:  reports for each study whether the model converged.
If it did not some information about the reason for this is reported.
}
\description{
Fits a generalized linear model (GLM) on data from single or multiple sources
with pooled co-analysis across studies being based on SLMA (Study-Level Meta-Analysis).
}
\details{
\code{ds.glmSLMA} specifies the structure of a Generalized Linear Model 
to be fitted separately on each study or data source. 
From a mathematical perspective, the SLMA approach (using \code{ds.glmSLMA})
differs fundamentally from the usual approach using \code{ds.glm}
in that the latter is mathematically equivalent
to placing all individual-level data from all sources in
one central warehouse and analysing those data as one combined dataset using the
conventional \code{glm()} function in R. 

However, although this
may sound to be preferable under all circumstances, the SLMA approach
offers key inferential advantages when there is marked heterogeneity
between sources that cannot simply be corrected with fixed-effects each reflecting a study
or centre-effect. In particular, fixed effects cannot simply be used in this way when 
there is heterogeneity in the effect that is of scientific interest.

In \code{formula} Most shortcut notation for formulas allowed under R's standard \code{glm()}
function is also allowed by \code{ds.glmSLMA}. 

Many glms can be fitted very simply using a formula such as:

\deqn{y~a+b+c+d} 

which simply means fit a glm with \code{y} as the outcome variable and 
\code{a}, \code{b}, \code{c} and \code{d} as covariates. 
By default all such models also include an intercept (regression constant) term.

Instead, if you need to fit a more complex
model, for example:

 \deqn{EVENT~1+TID+SEXF*AGE.60}

In the above model the outcome variable is \code{EVENT} 
and the  covariates 
\code{TID} (factor variable with level values between 1 and 6 denoting the period time), 
\code{SEXF} (factor variable denoting sex)
and \code{AGE.60} (quantitative variable representing age-60 in years). 
The term \code{1} forces
the model to include an intercept term, in contrast if you use the term \code{0} the 
intercept term is removed. The \code{*} symbol  between \code{SEXF} and \code{AGE.60}
means fit all possible main effects and interactions for and between those two covariates.
 This takes the value 0 in all males \code{0 * AGE.60} 
 and in females  \code{1 * AGE.60}. 
 This model is in example 1 of  the section \strong{Examples}. In this case the logarithm of 
 the survival time is added as an offset (\code{log(survtime)}).

In the \code{family} argument can be specified three types of models to fit:

 \itemize{
   \item{\code{"gaussian"}}{: conventional linear model with normally distributed errors} 
   \item{\code{"binomial"}}{: conventional unconditional logistic regression model}
   \item{\code{"poisson"}}{: Poisson regression model which is the most used in survival analysis. 
    The model used Piecewise Exponential Regression (PER) which typically closely approximates
    Cox regression in its main estimates and standard errors.}
}


At present the gaussian family is automatically coupled with
an \code{identity} link function, the binomial family with a
\code{logistic} link function and the poisson family with a \code{log} link function. 

However, if a particular user
wishes us to implement an alternative family
(e.g. \code{gamma}) or an alternative family/link combination (e.g. binomial with
probit) we can discuss how best to meet that request: it will almost certainly be possible,
but we may seek a small amount of funding or practical in-kind support from
the user to ensure that it can be carried out promptly.

 The \code{dataName} argument avoids you having to specify the name of the
data frame in front of each covariate in the formula. 
For example, if the data frame is called \code{DataFrame} you
avoid having to write: \eqn{DataFrame$y~DataFrame$a+DataFrame$b+DataFrame$c+DataFrame$d}

The \code{checks} argument verifies that the variables in the model are all defined (exist) 
on the server-site at every study
and that they have the correct characteristics required to fit the model. 
It is suggested to make \code{checks} argument TRUE if an unexplained
 problem in the model fit is encountered because the running process takes several minutes.
 
In \code{maxit} Logistic regression and Poisson regression
models can require many iterations, particularly if the starting value of the
regression constant is far away from its actual value that the GLM
is trying to estimate. In consequence we often set \code{maxit=30}
but depending on the nature of the models you wish to fit, you may wish
to be alerted much more quickly than this if there is a delay in convergence, 
or you may wish to all more iterations.


Server functions called: \code{glmSLMADS1} and \code{glmSLMADS2}
}
\examples{
\dontrun{

 ## Version 6, for version 5 see Wiki
  # Connecting to the Opal servers
  
  require('DSI')
  require('DSOpal')
  require('dsBaseClient')
  
  # Example 1: Fitting GLM for survival analysis
  # For this analysis we need to load survival data from the server 
  
  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING1", driver = "OpalDriver")
  builder$append(server = "study2", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING3", driver = "OpalDriver")
  logindata <- builder$build()
  
  # Log onto the remote Opal training servers
  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D") 
  
  # Fit the GLM 
  
  # make sure that the outcome is numeric 
  ds.asNumeric(x.name = "D$cens",
               newobj = "EVENT",
               datasources = connections)
               
  # convert time id variable to a factor 
               
  ds.asFactor(input.var.name = "D$time.id",
              newobj = "TID",
              datasources = connections)
              
  # create in the server-side the log(survtime) variable
         
  ds.log(x = "D$survtime",
         newobj = "log.surv",
         datasources = connections)
  
  ds.glmSLMA(formula = EVENT ~ 1 + TID + female * age.60,
         data = "D",
         family = "poisson", 
         offset = "log.surv",
         weights = NULL,
         checks = FALSE,
         maxit = 20,
         datasources = connections)
         
  # Clear the Datashield R sessions and logout
  datashield.logout(connections) 
  
  # Example 2: run a logistic regression without interaction
  # For this example we are going to load another type of data  
  
  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM1", driver = "OpalDriver")
  builder$append(server = "study2", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM3", driver = "OpalDriver")
  logindata <- builder$build()
  
  # Log onto the remote Opal training servers
  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D") 
  
  # Fit the logistic regression model

  mod <- ds.glmSLMA(formula = "DIS_DIAB~GENDER+PM_BMI_CONTINUOUS+LAB_HDL",
                data = "D",
                family = "binomial",
                datasources = connections)
                
  mod #visualize the results of the model

# Example 3: fit a standard Gaussian linear model with an interaction
# We are using the same data as in example 2. It is not necessary to
# connect again to the server 

mod <- ds.glmSLMA(formula = "PM_BMI_CONTINUOUS~DIS_DIAB*GENDER+LAB_HDL",
              data = "D",
              family = "gaussian",
              datasources = connections)
mod

# Clear the Datashield R sessions and logout
datashield.logout(connections) 
}

}
\author{
DataSHIELD Development Team
}
