% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.asMatrix.R
\name{ds.asMatrix}
\alias{ds.asMatrix}
\title{ds.asMatrix calling assign function asMatrixDS}
\usage{
ds.asMatrix(x.name = NULL, newobj = NULL, datasources = NULL)
}
\arguments{
\item{x.name}{the name of the input object to be coerced to a matrix.
Must be specified in inverted commas.}

\item{newobj}{the name of the new output variable. If this argument is set
to NULL, the name of the new variable is defaulted to <x.name>.mat}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. If the <datasources>
the default set of connections will be used: see \link{datashield.connections_default}.}
}
\value{
the object specified by the <newobj> argument (or by default <x.name>.mat
if the <newobj> argument is NULL) which is written to the serverside.
In addition, two validity messages are returned
indicating whether <newobj> has been created in each data source and if so whether
it is in a valid form. If its form is not valid in at least one study there may
be a studysideMessage that can explain the error in creating
the full output object. As well as appearing on the screen at run time,if you wish to
see the relevant studysideMessages at a later date you can use the {ds.message}
function. If you type ds.message(<newobj>) it will print out the relevant
studysideMessage from any datasource in which there was an error in creating <newobj>
and a studysideMessage was saved. If there was no error and <newobj> was created
without problems no studysideMessage will have been saved and ds.message(<newobj>)
will return the message: "ALL OK: there are no studysideMessage(s) on this datasource".
}
\description{
this function is based on the native R function {as.matrix}
}
\details{
This function is based on the native R function {as.matrix}
If applied to a data.frame, the native R function {as.matrix}
converts all columns into character class. If you wish to convert
a data.frame to a matrix but maintain all data columns in their
original class you should use the native R function {data.matrix}
and in DataSHIELD this is called by ds.asDataMatrix which calls
asDataMatrixDS
}
\author{
Amadou Gaye, Paul Burton, for DataSHIELD Development Team
}
